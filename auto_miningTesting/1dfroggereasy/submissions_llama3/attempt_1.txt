Here is the Python program for this problem:

```Python
import sys

def get_frog_fate(n, s, m, board):
    frog_pos = s
    hop_count = 0
    while True:
        if board[frog_pos-1] == m:
            return 'magic', hop_count
        elif frog_pos <= 1:
            return 'left', hop_count
        elif frog_pos >= n:
            return 'right', hop_count
        for i in range(1, abs(board[frog_pos-1])):
            frog_pos += 1 if board[frog_pos-1] > 0 else -1
        if board[frog_pos-1] == m:
            return 'magic', hop_count
        if set([frog_pos]) in [[i for i in range(1, n+1)]]:
            return 'cycle', hop_count + 1
        hop_count += 1

n, s, m = map(int, input().split())
board = list(map(int, input().split()))
fate, hops = get_frog_fate(n, s, m, board)
print(fate)
print(hops)
```

This program takes the input from standard input using `input()` and writes output to standard output using `print()`. It reads the number of squares (`n`), starting square index (`s`), magic number (`m`) on the first line. Then it reads the board square numbers in order from left to right on the second line.

The program defines a function `get_frog_fate()` that simulates the game until the frog encounters its fate or hops off the board. The function returns the fate of the frog and the number of hops made before reaching the fate.

Finally, the program prints out two lines: the first line contains the word indicating the fate of the frog, and the second line contains the integer `h`, the number of hops the frog makes before encountering its fate.