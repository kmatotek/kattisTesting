Here is a Python program that solves the Frogger problem. It reads input from standard input, processes it, and writes output to standard output. The game state is represented by a frog position (`frog_pos`), a list of board squares (`squares`), a magic number (`magic_num`) and a list of visited positions (`visited`). The game continues until the frog reaches one of the four end states or a cycle.

```python
# Read input from standard input
n, frog_pos, magic_num = map(int, input().split())
squares = list(map(int, input().split()))
frog_pos -= 1  # Adjust for 0-indexing

# Initialize visited positions and hop counter
visited = [False]*n
hops = 0

while True:
    if frog_pos < 0 or frog_pos >= n:  # Frog falls off the board
        print("left" if frog_pos < 0 else "right")
        break

    if visited[frog_pos]:  # Frog is trapped in a cycle
        print("cycle")
        break

    visited[frog_pos] = True
    hops += 1

    hop_len = squares[frog_pos]
    frog_pos += hop_len if hop_len > 0 else -hop_len  # Adjust for negative numbers

    if squares[frog_pos] == magic_num:  # Frog finds the magic number
        print("magic")
        break

print(hops)
```
This program can be run from the command line by typing `python3 filename.py` and then providing the input in the terminal. Replace `filename.py` with the actual name of your Python file. The output will also be printed to the terminal. Note that this code does not include any error checking or handling for invalid inputs, so it assumes the provided inputs are valid as per the problem statement.
