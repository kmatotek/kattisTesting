I apologize for the oversight in my previous response. Let's carefully analyze the problem and correct any mistakes.

The key points from the problem statement are:
- The frog starts on square `s`.
- The goal number `m` is located somewhere on the board.
- If the frog reaches a square with the goal number, it wins (`'magic'`).
- If the frog falls off the left or right end of the board, the game ends (`'left'` or `'right'`, respectively).
- If the frog hops onto a square it has visited before, it enters an infinite cycle (`'cycle'`).

The main issue in my previous solution was that it did not handle the case where the starting position `s` already contains the goal number `m`. In this case, the game should immediately return `'magic'`.

Let's correct the code accordingly:

```python
def frogger_game(n, s, m, board):
    visited = [False] * n
    hops = 0
    current_square = s - 1
    
    if board[current_square] == m:
        return 'magic', 0
    
    while True:
        hops += 1
        next_square = current_square + board[current_square]
        
        if next_square < 0 or next_square >= n:
            return 'left' if next_square < 0 else 'right', hops
        
        if visited[next_square]:
            return 'cycle', hops
        
        visited[next_square] = True
        current_square = next_square

# Read input
n, s, m = map(int, input().split())
board = list(map(int, input().split()))

# Determine the frog's fate and number of hops
fate, h = frogger_game(n, s, m, board)

# Output the result
print(fate)
print(h)
```

### Explanation of Changes:
1. **Check Starting Position**: If the starting position `s` already contains the goal number `m`, return `'magic'` immediately with 0 hops.
2. **Loop for Movement**: Continue looping to simulate the frog's movement until it reaches a winning condition, falls off the board, or enters an infinite cycle.

This should correctly handle all edge cases and sample test cases provided by the problem statement.