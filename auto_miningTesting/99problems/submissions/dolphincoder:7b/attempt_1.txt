To solve this problem, we can follow these steps:

1. Read the input number from standard input using input().
2. Check if the input number ends in a $99$. If it does, return the same value as output.
3. Check if the next higher digit is less than 50 (which would mean that the current digit is greater than or equal to 50). If so, round up to the nearest multiple of 100.
4. Otherwise, round down to the nearest multiple of 100.

The following Python program implements these steps:

```python
def find_nearest(n):
    if str(n)[-2:] == '99':
        return n
    
    digit = int(str(n)[:-2]) + 1 if int(str(n)[-2:]) >= 50 else int(str(n)[:-2])

    return (digit * 100) - 1

n = int(input())
print(find_nearest(n))
```

You can run this program by executing it in a Python environment. Here's an example of how to do it:

1. Save the code as a file named `bicycle_parts.py`.
2. Open a terminal or command prompt and navigate to the directory where you saved the file.
3. Run the program using the following command: `python bicycle_parts.py`.
4. Enter your input number when prompted.
5. The output will be printed, followed by an empty line.
6. You can repeat this process for other test cases to validate your solution.