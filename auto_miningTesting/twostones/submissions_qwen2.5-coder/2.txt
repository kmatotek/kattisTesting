Here's a Python program that solves the problem:

```python
def determine_winner(n):
    if n % 2 == 1:
        return "Alice"
    else:
        return "Bob"

# Read input
n = int(input())

# Determine and print the winner
print(determine_winner(n))
```

### Explanation

- **Function `determine_winner`**:
  - This function takes an integer `n` as its argument.
  - It checks if `n` is odd or even using the modulus operator `%`.
    - If `n % 2 == 1`, it means the number of stones is odd, so Alice wins. The function returns "Alice".
    - Otherwise, if `n % 2 == 0`, it means the number of stones is even, so Bob wins. The function returns "Bob".

- **Reading Input**:
  - The program reads an integer `n` from the standard input using `input()` and converts it to an integer with `int(input())`.

- **Printing Output**:
  - The result returned by `determine_winner(n)` is printed on a new line.

### Test Cases

Let's run through your sample test cases:

1. **Input**: `1`
   - **Output**: `Alice` (Since 1 is odd, Alice wins)

2. **Input**: `2`
   - **Output**: `Bob` (Since 2 is even, Bob wins)

3. **Input**: `5`
   - **Output**: `Alice` (Since 5 is odd, Alice wins)

### Conclusion

This solution leverages the fact that if the number of stones \( N \) is odd, Alice will always win because she can force Bob into a losing position by taking two consecutive stones in her first move. Conversely, if \( N \) is even, Bob will have the advantage and will be able to ensure his victory with optimal play.

The program is efficient with a time complexity of \( O(1) \), as it only performs a single modulus operation regardless of the size of \( N \).