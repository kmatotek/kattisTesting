The problem at hand is a classic example of a combinatorial game theory. It involves determining the winner based on optimal play strategies.

In this game, Alice and Bob take turns removing two consecutive stones from the sequence until no more such pairs exist. The key observation here is that if the initial number of stones \( N \) is odd, Alice will always win because she can ensure an odd number of stones remain after each of her moves, ensuring victory on her last move.

Conversely, if \( N \) is even, Bob will have the advantage and can force Alice into a losing position by maintaining an even number of stones for as long as possible.

Given this insight, we can determine the winner directly without simulating the entire game. Here's how you can implement this logic in Python:

```python
def determine_winner(N):
    if N % 2 == 1:
        return "Alice"
    else:
        return "Bob"

# Read input from standard input
N = int(input().strip())

# Determine and print the winner
winner = determine_winner(N)
print(winner)
```

### Explanation:

1. **Function Definition**:
   - `determine_winner(N)`: This function takes an integer \( N \) as input and returns either "Alice" or "Bob".
   
2. **Logic**:
   - If \( N \) is odd, Alice wins.
   - If \( N \) is even, Bob wins.

3. **Input Handling**:
   - The program reads an integer \( N \) from standard input using `input().strip()` and converts it to an integer.
   
4. **Output**:
   - It calls the `determine_winner` function with the input \( N \) and prints the result.

This solution is efficient because it directly computes the winner based on the parity of \( N \), which has a time complexity of \( O(1) \).