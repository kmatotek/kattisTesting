To solve this problem, we need to determine the winner of the game based on the number of stones \( N \). The key insight is that if the number of stones left is odd after a player's turn, Alice wins. Otherwise, Bob wins.

Hereâ€™s the reasoning:
- If \( N \) is even, each move reduces the number of stones by 2 (since two consecutive stones are taken).
- When \( N \) becomes odd, it will be Alice's turn to make the last move, making the remaining number of stones odd.
- If \( N \) is initially odd, it will be Bob's turn to make the first move, and since he can always force the game to end with an even number of stones left for Alice.

Thus, Alice wins if \( N \) is odd, and Bob wins if \( N \) is even.

Here is the Python program based on this logic:

```python
def determine_winner(N):
    if N % 2 == 0:
        return "Bob"
    else:
        return "Alice"

# Read input
N = int(input().strip())

# Determine and print the winner
print(determine_winner(N))
```

### Explanation:
1. **Function Definition**: The function `determine_winner` takes an integer \( N \) as input.
2. **Check Parity**:
   - If \( N \) is even (`N % 2 == 0`), return "Bob".
   - Otherwise, return "Alice".
3. **Input Handling**: Read the input \( N \) using `input().strip()` and convert it to an integer.
4. **Output**: Print the result of calling the `determine_winner` function with the input \( N \).

This program is efficient and meets the constraints provided (with \( 1 \leq N \leq 10\,000\,000 \)).