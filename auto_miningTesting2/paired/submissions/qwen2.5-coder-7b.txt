Here is a Python solution for your problem. The idea here is to use a dictionary to track the last occurrence of each element, and then find the maximum length of subarray with exactly two occurrences of each distinct integer.

```python
def max_subarray_length(array):
    index_map = {}  # To store the last seen indices of elements in the array
    start = result = 0  # Initialize start index to 0 and result to 0

    for i, num in enumerate(array):  
        if num in index_map:
            # If element is already present in dictionary, remove all indices before its previous occurrence 
            while start <= index_map[num]:
                del index_map[array[start]]    
                start += 1
                
        index_map[num] = i  # Update the last seen index of current number
        
    return result

# Read input
N = int(input())
array = [int(x) for x in input().split()]

# Call function and print output
print(max_subarray_length(array))
```
This program reads an integer N and then a list of N integers as input. It uses the `max_subarray_length` function to find the length of the longest sub-array where each element appears exactly twice. The result is printed at the end.

Please note that this Python script assumes the input given is always in correct format as per problem statement. If there are chances of incorrect inputs, additional error handling code might be needed.