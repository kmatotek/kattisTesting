```python
def jetpack_joyride():
    """
    Calculates the moves for Jetpack Joyride game to avoid obstacles.

    Returns:
        tuple: A tuple containing the number of moves and a list of moves.
    """

    num_columns = int(input())
    field_layout = [input() for _ in range(10)]

    current_row = 9  # Start from the bottom row
    current_column = 1  # Start from the second column
    moves = []
    move_count = 0

    while current_column < num_columns:
        # Check for obstacles in the next 3 columns
        obstacle_found = False
        for col_offset in range(1, 4):
            if current_column + col_offset <= num_columns and field_layout[current_row][current_column + col_offset - 1] == 'X':
                obstacle_found = True
                break

        if obstacle_found:
            # Calculate jump duration
            jump_duration = 2 * (9 - current_row) + 1  
            moves.append((current_column, jump_duration))
            move_count += 1
            current_column += jump_duration  
        else:
            current_column += 1

    return move_count, moves


if __name__ == "__main__":
    move_count, move_list = jetpack_joyride()
    print(move_count)
    for column, duration in move_list:
        print(column, duration)
```

**Explanation:**

1. **`jetpack_joyride()` Function:**
   - Reads the input: number of columns (`num_columns`) and the field layout (`field_layout`).
   - Initializes variables: `current_row` (Barry's row), `current_column` (Barry's column), `moves` (list to store moves), `move_count`.
   - Enters a loop that continues until Barry reaches the end of the field (`current_column < num_columns`).

2. **Obstacle Detection:**
   - Inside the loop, the code checks for obstacles in the next three columns in front of Barry. 
   - If an obstacle ('X') is found, the `obstacle_found` flag is set to `True`.

3. **Jump Calculation and Execution:**
   - If an obstacle is detected (`obstacle_found` is `True`):
     - The `jump_duration` is calculated based on Barry's current row to clear the obstacle. The formula ensures a 45-degree diagonal jump.
     - A new move, represented by the tuple `(current_column, jump_duration)`, is appended to the `moves` list.
     - `move_count` is incremented.
     - Barry's position (`current_column`) is updated to reflect the jump.

4. **Moving Forward:**
   - If no obstacle is found, Barry moves one column forward (`current_column += 1`).

5. **Output:**
   - Finally, the function returns the `move_count` and the `moves` list.
   - The main part of the code then prints the `move_count` and the details of each move (column and duration).

**Key Points:**

- The code uses descriptive variable names to enhance readability.
- It employs a simple and efficient logic to detect obstacles and calculate jump durations.
- The code adheres to the input/output format specified in the problem statement.

This program provides a solution to help Mirko play Jetpack Joyride by calculating the precise timing and duration of jumps needed to avoid obstacles. 
