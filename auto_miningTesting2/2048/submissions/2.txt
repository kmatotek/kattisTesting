Here is a Python solution to the problem. The solution uses list comprehension and built-in Python functions to perform the operations. It follows the game rules and handles the different moves accordingly.

```python
import sys

def merge(line):
    non_zeros = [i for i in line if i != 0] # filter zeros
    for i in range(len(non_zeros)-1):
        if non_zeros[i] == non_zeros[i+1]: # if neighbor elements are equal
            non_zeros[i] *= 2               # double current element
            non_zeros[i+1] = 0              # set neighbor element to zero
    non_zeros = [i for i in non_zeros if i != 0] # filter newly made zeros
    non_zeros += [0] * (len(line) - len(non_zeros)) # fill the rest with zeros
    return non_zeros

# read input
board = [list(map(int, input().split())) for _ in range(4)]
move = int(input().strip())

if move == 0: # left
    board = [merge(row) for row in board]
elif move == 1: # up
    board = [merge(list(row)) for row in zip(*board)]
    board = [list(row) for row in zip(*board)] # transpose back to original orientation
elif move == 2: # right
    board = [merge(row[::-1])[::-1] for row in board]
elif move == 3: # down
    board = [merge(list(row[::-1]))[::-1] for row in zip(*board)]
    board = [list(row) for row in zip(*board)] # transpose back to original orientation

# print new state
for row in board:
    print(' '.join(map(str, row)))
```
This Python program reads the game board and the move direction from the standard input. Based on the move direction, it goes over the board and merges the equal neighbours in either row or column orientation by applying the merge function. In the end, it prints out the new state of the game board. The merge function first filters out the zeros, then it goes over the remaining elements and merges the neighbours if they are equal and finally fills up the rest of the line with zeros. Note that, for the up and down movement directions, the program transposes the game board. Transposing a matrix (or list of lists, in this case) means rotating it 90 degrees in clockwise direction, that is, the rows of the input matrix become columns of the output matrix, and columns of the input become rows of the output. This is done by reversing the rows and changing the row and column indices for each element.