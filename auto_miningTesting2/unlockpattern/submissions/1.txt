Here is a Python program that uses no external libraries to solve this problem. The program takes as input a list of list or a 2-dimensional array of 9 numbers where each list or sub-array is the numbers in each line.

In the program, a grid of coordinates is created in the 'coordinates' variable that maps each number to its coordinates on the grid. The 'total_distance' function takes two coordinates and calculates the Euclidian distance between them. This function is then used to calculate the total distance of the pattern.

```Python
def total_distance(a, b):
    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5

def pattern_length(p):
    coordinates = {1:[0,0],2:[0,1],3:[0,2],
                   4:[1,0],5:[1,1],6:[1,2],
                   7:[2,0],8:[2,1],9:[2,2]}

    total = 0
    for i in range(len(p) - 1):
        total += total_distance(coordinates[p[i]], coordinates[p[i+1]])

    return total

pattern = [[1,2,3],[4,5,6],[7,8,9]]
pattern = [i for sublist in pattern for i in sublist] 
# Flatten the list

print(pattern_length(pattern))
```
This program will print the total straight line distance of the pattern based on the Euclidian distance calculation.