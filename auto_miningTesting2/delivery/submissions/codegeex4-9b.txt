The problem is to determine the minimum total travel distance a postal truck must cover to deliver mail to various locations from a single post office located at the origin, and return to the post office. The truck has a limited carrying capacity, and it may need to return to the post office for reloading after reaching its capacity.

## Solution Strategy

The solution involves dynamic programming to efficiently calculate the minimum travel distance. We will maintain a table `dp` where `dp[j]` represents the minimum distance traveled to deliver all mail up to the current location considering that the truck can carry `j` letters at most. The state transition involves deciding whether to deliver more mail at the current location or move on to the next based on the truck's capacity.

## Steps:
1. Initialize a list `dp` of size `K+1` (where `K` is the carrying capacity) with infinity (`float('inf')`) since initially, no delivery can be made.
2. Set `dp[0] = 0` because no travel is needed if no mail is to be delivered.
3. For each location and its corresponding load, update the `dp` table to reflect the minimum distance by considering:
   - Delivering all possible loads up to the current capacity without reloading at this location.
   - Moving to the next location with some remaining capacity from previous deliveries.

## Implementation

```python
def postal_delivery(n, k, deliveries):
    # Initialize the dp array where dp[j] is the minimum distance to deliver mail with j capacity left in the truck
    dp = [float('inf')] * (k + 1)
    dp[0] = 0  # No cost if no mail needs to be delivered
    
    # Process each delivery location
    for loc, load in deliveries:
        # Traverse from the current capacity backwards to prevent overwriting results of this round
        for j in range(k - load, -1, -1):
            if dp[j] != float('inf'):
                new_cost = dp[j] + 2 * abs(loc)  # Cost to deliver all mail at this location and return
                if new_cost < dp[j + load]:
                    dp[j + load] = new_cost
    
    # The answer is the minimum cost to deliver all mail and return with no capacity left in the truck
    return dp[k]

# Input reading
n, k = map(int, input().split())
deliveries = []
for _ in range(n):
    x, t = map(int, input().split())
    deliveries.append((x, t))

# Calculate the minimum travel distance
result = postal_delivery(n, k, deliveries)
print(result)
```

This implementation reads the number of delivery locations `n` and the carrying capacity `k`, then reads each delivery location and the corresponding load. It uses the `postal_delivery` function to compute and print the minimum total travel distance needed for the delivery route. The function uses dynamic programming to efficiently compute the solution.