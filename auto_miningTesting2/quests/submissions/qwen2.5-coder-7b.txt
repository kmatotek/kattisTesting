To solve this problem, we need to determine an optimal order in which to complete the quests such that the total number of experience points (XPs) earned is maximized. Here's a step-by-step plan for the solution:

1. **Calculate Initial Level**: The initial level is 0.
2. **XP Calculation Function**: Create a function to calculate the XP earned based on the current level and quest details.
3. **Dynamic Programming Approach**: Use dynamic programming to keep track of the maximum XPs that can be earned up to each quest.

Let's break down the solution into Python code:

```python
def calculate_xp(current_level, x, d, c):
    if current_level >= d:
        return x
    else:
        return c * x

def max_xp(n, v, c, quests):
    # Initialize DP array where dp[i] is the maximum XP we can earn up to quest i
    dp = [0] * (n + 1)
    
    for i in range(1, n + 1):
        current_level = dp[i - 1] // v if dp[i - 1] > 0 else 0
        x, d = quests[i - 1]
        
        # Calculate XP without multiplier
        xp_without_multiplier = calculate_xp(current_level, x, d, c)
        
        # Calculate the new level after completing the quest without multiplier
        new_level_no_mul = current_level + xp_without_multiplier // v
        
        # Calculate XP with multiplier
        xp_with_multiplier = calculate_xp(current_level, x, d, c) * c
        
        # Calculate the new level after completing the quest with multiplier
        new_level_mul = current_level + (xp_with_multiplier - 1) // v
        
        # Update DP array considering both scenarios
        dp[i] = max(dp[i - 1], xp_without_multiplier + dp[new_level_no_mul] * v, xp_with_multiplier + dp[new_level_mul] * v)
    
    return dp[n]

# Read input
n, v, c = map(int, input().split())
quests = [tuple(map(int, input().split())) for _ in range(n)]

# Calculate and output the maximum XP
print(max_xp(n, v, c, quests))
```

### Explanation:

1. **calculate_xp Function**: This function calculates the XP earned based on whether the current level meets or exceeds the quest's target difficulty level.
2. **Dynamic Programming Array (dp)**: `dp[i]` stores the maximum XPs that can be earned up to the `i-th` quest.
3. **Iterate Through Quests**: For each quest, calculate both the XP without the multiplier and with the multiplier. Update the DP array based on these calculations.

This approach ensures that we consider all possible scenarios for completing quests in an optimal order to maximize the total XPs earned. The time complexity is manageable given the constraints (up to 2000 quests), making this solution feasible.